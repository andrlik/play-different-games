{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Play Different Games","text":"<p>A discovery engine for TTRPGs.</p> <p>This will be a catalog of games, systems, publishers, and authors. The goal will be to highlight the wide variety of games and designers and help people find their next TTRPG to fall in love with.</p> <p>This is pre-release and not suitable for basically anyone yet.</p> <p> </p>"},{"location":"#installation","title":"Installation","text":"<p>Seriously, don't try and install this yet.</p>"},{"location":"#usage","title":"Usage","text":"<p>I mean it, don't use it until we do an official release.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>See our contributing guide.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#unreleased","title":"Unreleased","text":"<ul> <li>Initial release</li> </ul>"},{"location":"code_of_conduct/","title":"Contributing","text":"<p>All contributions, whether in the form of bug reports, pull requests, and documentation updates are very welcome!</p>"},{"location":"code_of_conduct/#development-task-runner","title":"Development task runner","text":"<p>We use <code>just</code> to execute common tasks. It is available for any platform. Once installed, you can see a list of available commands by running <code>just --list</code>.</p>"},{"location":"code_of_conduct/#dependencies","title":"Dependencies","text":"<p>We use <code>uv</code> to manage the Python dependencies. If you don't have <code>uv</code>, you should install with <code>just uv-install</code>.</p> <p>To install dependencies and prepare <code>pre-commit</code> hooks you would need to run the <code>bootstrap</code> command:</p> <pre><code>just bootstrap\n</code></pre>"},{"location":"code_of_conduct/#running-updates","title":"Running updates","text":"<p>After pulling new updates from the repository you can quickly install updated dependencies and run database migrations by running <code>just bootstrap</code>.</p>"},{"location":"code_of_conduct/#codestyle","title":"Codestyle","text":"<p>After installation you may execute code formatting.</p> <pre><code>just fmt\n</code></pre>"},{"location":"code_of_conduct/#checks","title":"Checks","text":"<p>Many checks are configured for this project.</p> <p>To run your test suite:</p> <pre><code>just test\n</code></pre> <p>Or you can run testing for linting and multiple supported Python versions via:</p> <pre><code>just tox\n</code></pre> <p>To use pyright for type checking run: <pre><code>just check-types\n</code></pre></p> <p>To run linting:</p> <pre><code>just lint\n</code></pre> <p>The <code>just safety</code> command will look at the security of your code.</p>"},{"location":"code_of_conduct/#before-submitting","title":"Before submitting","text":"<p>Before submitting your code please do the following steps:</p> <ol> <li>Add any changes you want</li> <li>Add tests for the new changes</li> <li>Edit documentation if you have changed something significant</li> <li>Run <code>just fmt</code> to format your changes.</li> <li>Run <code>just check-all</code> to ensure that types, security and docstrings are okay.</li> <li>Run <code>just tox</code> to ensure all tests pass.</li> </ol>"},{"location":"code_of_conduct/#other-help","title":"Other help","text":"<p>You can contribute by spreading a word about this library. It would also be a huge contribution to write a short article on how you are using this project. You can also share your best practices with us.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>All contributions, whether in the form of bug reports, pull requests, and documentation updates are very welcome!</p>"},{"location":"contributing/#development-task-runner","title":"Development task runner","text":"<p>We use <code>just</code> to execute common tasks. It is available for any platform. Once installed, you can see a list of available commands by running <code>just --list</code>.</p>"},{"location":"contributing/#dependencies","title":"Dependencies","text":"<p>We use <code>uv</code> to manage the Python dependencies. If you don't have <code>uv</code>, you should install with <code>just uv-install</code>.</p> <p>To install dependencies and prepare <code>pre-commit</code> hooks you would need to run the <code>bootstrap</code> command:</p> <pre><code>just bootstrap\n</code></pre>"},{"location":"contributing/#running-updates","title":"Running updates","text":"<p>After pulling new updates from the repository you can quickly install updated dependencies and run database migrations by running <code>just bootstrap</code>.</p>"},{"location":"contributing/#codestyle","title":"Codestyle","text":"<p>After installation you may execute code formatting.</p> <pre><code>just fmt\n</code></pre>"},{"location":"contributing/#checks","title":"Checks","text":"<p>Many checks are configured for this project.</p> <p>To run your test suite:</p> <pre><code>just test\n</code></pre> <p>Or you can run testing for linting and multiple supported Python versions via:</p> <pre><code>just tox\n</code></pre> <p>To use pyright for type checking run: <pre><code>just check-types\n</code></pre></p> <p>To run linting:</p> <pre><code>just lint\n</code></pre> <p>The <code>just safety</code> command will look at the security of your code.</p>"},{"location":"contributing/#before-submitting","title":"Before submitting","text":"<p>Before submitting your code please do the following steps:</p> <ol> <li>Add any changes you want</li> <li>Add tests for the new changes</li> <li>Edit documentation if you have changed something significant</li> <li>Run <code>just fmt</code> to format your changes.</li> <li>Run <code>just check-all</code> to ensure that types, security and docstrings are okay.</li> <li>Run <code>just tox</code> to ensure all tests pass.</li> </ol>"},{"location":"contributing/#other-help","title":"Other help","text":"<p>You can contribute by spreading a word about this library. It would also be a huge contribution to write a short article on how you are using this project. You can also share your best practices with us.</p>"},{"location":"security/","title":"Security","text":""},{"location":"security/#reporting-security-issues","title":"\ud83d\udd10 Reporting Security Issues","text":"<p>Do not open issues that might have security implications! It is critical that security related issues are reported privately so we have time to address them before they become public knowledge.</p> <p>Vulnerabilities can be reported securely at this page</p> <p>Please include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:</p> <ul> <li>Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)</li> <li>Full paths of source file(s) related to the manifestation of the issue</li> <li>The location of the affected source code (tag/branch/commit or direct URL)</li> <li>Any special configuration required to reproduce the issue</li> <li>Environment (e.g. Linux / Windows / macOS)</li> <li>Step-by-step instructions to reproduce the issue</li> <li>Proof-of-concept or exploit code (if possible)</li> <li>Impact of the issue, including how an attacker might exploit the issue</li> </ul> <p>This information will help us triage your report more quickly.</p>"},{"location":"security/#preferred-languages","title":"Preferred Languages","text":"<p>We prefer all communications to be in English.</p>"},{"location":"reference/play_different_games/admin/","title":"admin","text":""},{"location":"reference/play_different_games/asgi/","title":"asgi","text":""},{"location":"reference/play_different_games/context_processors/","title":"context_processors","text":"<p>Additional context processors for the project.</p>"},{"location":"reference/play_different_games/context_processors/#src.play_different_games.context_processors.provide_version","title":"provide_version","text":"<pre><code>provide_version(request: HttpRequest) -&gt; dict[str, str]\n</code></pre> <p>Provide the project version number to the request context.</p> Source code in <code>src/play_different_games/context_processors.py</code> <pre><code>def provide_version(request: HttpRequest) -&gt; dict[str, str]:  # noqa: ARG001\n    \"\"\"Provide the project version number to the request context.\"\"\"\n\n    return {\"version\": __version__}\n</code></pre>"},{"location":"reference/play_different_games/settings/","title":"settings","text":""},{"location":"reference/play_different_games/urls/","title":"urls","text":""},{"location":"reference/play_different_games/views/","title":"views","text":"<p>Views used to override views to add htmx</p>"},{"location":"reference/play_different_games/views/#src.play_different_games.views.HtmxPartialMixin","title":"HtmxPartialMixin","text":"<p>Modifies the template to the specified partial if the request is htmx.</p>"},{"location":"reference/play_different_games/catalog/admin/","title":"admin","text":""},{"location":"reference/play_different_games/catalog/apps/","title":"apps","text":""},{"location":"reference/play_different_games/catalog/models/","title":"models","text":""},{"location":"reference/play_different_games/catalog/views/","title":"views","text":""},{"location":"reference/play_different_games/core/apps/","title":"apps","text":""},{"location":"reference/play_different_games/core/models/","title":"models","text":"<p>Abstract and base models for the whole project.</p>"},{"location":"reference/play_different_games/core/models/#src.play_different_games.core.models.SluggedUUIDTimestampedModel","title":"SluggedUUIDTimestampedModel","text":"<pre><code>SluggedUUIDTimestampedModel(*args, **kwargs)\n</code></pre> <p>               Bases: <code>UUIDModel</code>, <code>TimeStampedModel</code>, <code>UniqueSlugModel</code></p> <p>Combines the timestamped, UUID, and Unique Slug models.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>uuid</code> <p>The primary key of the model.</p> <code>slug</code> <code>str</code> <p>A unique slug for this instance.</p> <code>created_at</code> <code>datetime</code> <p>The date and time when the record was created.</p> <code>modified_at</code> <code>datetime</code> <p>The date and time when the record was last updated.</p> Source code in <code>src/play_different_games/core/models.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    \"\"\"\n    Adds a new key to the Meta class enabling us to use `slug_based_on_fields`\n    with a default of `['title',]`.\n    In actual subclassed models you can override with:\n        class SlugMeta:\n            slug_based_on_fields = ['field1', 'field2', ...]\n    \"\"\"\n    cls = self.__class__\n    my_meta = getattr(cls, \"SlugMeta\", None)\n    cls._slug_meta = my_meta  # type: ignore\n    super().__init__(*args, **kwargs)\n</code></pre>"},{"location":"reference/play_different_games/core/models/#src.play_different_games.core.models.TimeStampedModel","title":"TimeStampedModel","text":"<p>               Bases: <code>Model</code></p> <p>An abstract model that adds creation and modified timestamps.</p>"},{"location":"reference/play_different_games/core/models/#src.play_different_games.core.models.UUIDModel","title":"UUIDModel","text":"<p>               Bases: <code>Model</code></p> <p>A model that uses a UUID as its primary key.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>uuid</code> <p>The primary key of the model.</p>"},{"location":"reference/play_different_games/core/models/#src.play_different_games.core.models.UniqueSlugModel","title":"UniqueSlugModel","text":"<pre><code>UniqueSlugModel(*args, **kwargs)\n</code></pre> <p>               Bases: <code>Model</code></p> <p>A model that allows you to define a slug based on other fields.</p> <p>Attributes:</p> Name Type Description <code>slug</code> <code>str</code> <p>A unique slug for this instance.</p> <p>In actual subclassed models you can override with:     class SlugMeta:         slug_based_on_fields = ['field1', 'field2', ...]</p> Source code in <code>src/play_different_games/core/models.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    \"\"\"\n    Adds a new key to the Meta class enabling us to use `slug_based_on_fields`\n    with a default of `['title',]`.\n    In actual subclassed models you can override with:\n        class SlugMeta:\n            slug_based_on_fields = ['field1', 'field2', ...]\n    \"\"\"\n    cls = self.__class__\n    my_meta = getattr(cls, \"SlugMeta\", None)\n    cls._slug_meta = my_meta  # type: ignore\n    super().__init__(*args, **kwargs)\n</code></pre>"},{"location":"reference/play_different_games/core/models/#src.play_different_games.core.models.UniqueSlugModel.check_slug_configuration","title":"check_slug_configuration","text":"<pre><code>check_slug_configuration() -&gt; None\n</code></pre> <p>Does a sanity check to ensure the slug configuration and save operations. Raise <code>ImproperlyConfigured</code> if fails test.</p> Source code in <code>src/play_different_games/core/models.py</code> <pre><code>def check_slug_configuration(self) -&gt; None:\n    \"\"\"\n    Does a sanity check to ensure the slug configuration and save operations.\n    Raise `ImproperlyConfigured` if fails test.\n    \"\"\"\n    for x in self._slug_meta.slug_based_on_fields:  # type: ignore\n        if not hasattr(self, x):\n            msg = f\"Cannot find field '{x}' in model to generate slug from.\"\n            raise ImproperlyConfigured(msg)\n</code></pre>"},{"location":"reference/play_different_games/core/models/#src.play_different_games.core.models.UniqueSlugModel.generate_slug","title":"generate_slug","text":"<pre><code>generate_slug() -&gt; str\n</code></pre> <p>Gathers the slug source field data and sets the slug based on the result of a unique slug.</p> Source code in <code>src/play_different_games/core/models.py</code> <pre><code>def generate_slug(self) -&gt; str:\n    \"\"\"\n    Gathers the slug source field data and sets the slug based on the result of\n    a unique slug.\n    \"\"\"\n    self.check_slug_configuration()\n    slug_src: str = \"\"\n    src_fields = self._slug_meta.slug_based_on_fields  # type: ignore\n    if len(src_fields) &gt; 1:\n        for x in src_fields:\n            slug_src = f\"{slug_src} {getattr(self, x)}\"\n    else:\n        slug_src = getattr(self, src_fields[0])\n    return generate_unique_slug_for_model(\n        type(self), text=slug_src, allow_unicode=True\n    )\n</code></pre>"},{"location":"reference/play_different_games/core/models/#src.play_different_games.core.models.UniqueSlugModel.save","title":"save","text":"<pre><code>save(*args, **kwargs)\n</code></pre> <p>Save method from Django, but we also generate a unique slug if not already defined.</p> Source code in <code>src/play_different_games/core/models.py</code> <pre><code>def save(self, *args, **kwargs):\n    \"\"\"\n    Save method from Django, but we also generate a unique slug if not already\n    defined.\n    \"\"\"\n    if not self.slug:\n        self.slug = self.generate_slug()\n    super().save(*args, **kwargs)\n</code></pre>"},{"location":"reference/play_different_games/core/tasks/","title":"tasks","text":"<p>Maintenance tasks for playdifferentgames</p>"},{"location":"reference/play_different_games/core/tasks/#src.play_different_games.core.tasks.remove_unreferenced_media_files","title":"remove_unreferenced_media_files","text":"<pre><code>remove_unreferenced_media_files() -&gt; tuple[int, int]\n</code></pre> <p>Delete unreferenced media files. You can then configure this as a scheduled task.</p> <p>Returns:</p> Type Description <code>tuple[int, int]</code> <p>Number of deleted media files and the number of failures.</p> Source code in <code>src/play_different_games/core/tasks.py</code> <pre><code>def remove_unreferenced_media_files() -&gt; tuple[int, int]:\n    \"\"\"Delete unreferenced media files. You can then configure this as a scheduled task.\n\n    Returns:\n        Number of deleted media files and the number of failures.\n    \"\"\"\n    orphan_files = get_unreferenced_media_paths()\n    total_deleted = 0\n    total_failed = 0\n    for file in orphan_files:\n        try:\n            default_storage.delete(file)\n            total_deleted += 1\n        except Exception as err:\n            msg = f\"Failed to delete {file}. Details: {err}\"\n            logger.error(msg)\n            total_failed += 1\n    logger.debug(\n        f\"Deleted {total_deleted} unreferenced media files, and failed to \"\n        f\"delete {total_failed} unreferenced media files.\"\n    )\n    return total_deleted, total_failed\n</code></pre>"},{"location":"reference/play_different_games/core/utils/","title":"utils","text":""},{"location":"reference/play_different_games/core/utils/#src.play_different_games.core.utils.generate_unique_slug_for_model","title":"generate_unique_slug_for_model","text":"<pre><code>generate_unique_slug_for_model(\n    model_class: type[Model],\n    text: str,\n    slug_field: str | None = \"slug\",\n    max_length_override: int | None = None,\n    allow_unicode: bool | None = None,\n) -&gt; str\n</code></pre> <p>Given a text and model class, generate a unique slug based on that text.</p> <p>Parameters:</p> Name Type Description Default <code>model_class</code> <code>Model</code> <p>A class based upon <code>django.db.models.Model</code>.</p> required <code>text</code> <code>str</code> <p>The text to convert to a slug.</p> required <code>slug_field</code> <code>str</code> <p>The name of the field for saving the slug. Default 'slug'.</p> <code>'slug'</code> <code>max_length_override</code> <code>int | None</code> <p>Max length in characters for resulting slug.</p> <code>None</code> <code>allow_unicode</code> <code>bool | None</code> <p>Allow Unicode characters in slug. Default None.</p> <code>None</code> <p>Returns:     The generated slug as a str.</p> Source code in <code>src/play_different_games/core/utils.py</code> <pre><code>def generate_unique_slug_for_model(\n    model_class: type[Model],\n    text: str,\n    slug_field: str | None = \"slug\",\n    max_length_override: int | None = None,\n    allow_unicode: bool | None = None,\n) -&gt; str:\n    \"\"\"\n    Given a text and model class, generate a unique slug based on that text.\n\n    Args:\n        model_class (Model): A class based upon `django.db.models.Model`.\n        text (str): The text to convert to a slug.\n        slug_field (str): The name of the field for saving the slug. Default 'slug'.\n        max_length_override (int | None): Max length in characters for resulting slug.\n        allow_unicode (bool | None): Allow Unicode characters in slug. Default None.\n    Returns:\n        The generated slug as a str.\n    \"\"\"\n    if allow_unicode is None:\n        allow_unicode = False\n    unique_found: bool = False\n    has_next: bool = False\n    next_val: int = 1\n    max_length: int\n    if not max_length_override:\n        logger.debug(\"Setting max_length of slug from field definition.\")\n        max_length: int = model_class._meta.get_field(slug_field).max_length  # type: ignore\n    else:\n        logger.debug(\n            f\"User override value for max length of slug with [{max_length_override}]\"\n        )\n        max_length = max_length_override\n    base_slug = slugify(text[:max_length], allow_unicode=allow_unicode)\n    logger.debug(f\"Base slug is set to '{base_slug}'.\")\n    slug = base_slug\n    while not unique_found:\n        logger.debug(f\"Testing uniqueness of slug '{slug}'...\")\n        try:\n            model_class.objects.get(**{str(slug_field): slug})\n        except ObjectDoesNotExist:\n            logger.debug(\"Slug is unique!\")\n            unique_found = True\n        if not unique_found:\n            logger.debug(\"Slug is not unique yet.\")\n            if has_next:\n                slug = base_slug\n            if len(slug) &gt;= max_length:\n                slug = slug[: max_length - (len(str(next_val)) + 1)]\n            slug = slug + f\"-{next_val}\"\n            has_next = True\n            next_val += 1\n    return slug\n</code></pre>"},{"location":"reference/play_different_games/users/admin/","title":"admin","text":""},{"location":"reference/play_different_games/users/admin/#src.play_different_games.users.admin.UserProfileInlineAdmin","title":"UserProfileInlineAdmin","text":"<p>               Bases: <code>StackedInline</code></p> <p>ModelAdmin for UserProfile</p>"},{"location":"reference/play_different_games/users/apps/","title":"apps","text":""},{"location":"reference/play_different_games/users/forms/","title":"forms","text":""},{"location":"reference/play_different_games/users/middleware/","title":"middleware","text":""},{"location":"reference/play_different_games/users/middleware/#src.play_different_games.users.middleware.TimezoneMiddleware","title":"TimezoneMiddleware","text":"<pre><code>TimezoneMiddleware(get_response)\n</code></pre> <p>Sets the user's timezone in the session and activates it.</p> Source code in <code>src/play_different_games/users/middleware.py</code> <pre><code>def __init__(self, get_response):\n    self.get_response = get_response\n</code></pre>"},{"location":"reference/play_different_games/users/models/","title":"models","text":""},{"location":"reference/play_different_games/users/models/#src.play_different_games.users.models.UserProfile","title":"UserProfile","text":"<p>               Bases: <code>Model</code></p> <p>Custom user profile for PodProducer</p>"},{"location":"reference/play_different_games/users/rules/","title":"rules","text":""},{"location":"reference/play_different_games/users/urls/","title":"urls","text":""},{"location":"reference/play_different_games/users/views/","title":"views","text":""},{"location":"reference/play_different_games/users/views/#src.play_different_games.users.views.UserDetailView","title":"UserDetailView","text":"<p>               Bases: <code>LoginRequiredMixin</code>, <code>PermissionRequiredMixin</code>, <code>DetailView</code></p> <p>Where a user can view their details.</p>"},{"location":"reference/play_different_games/users/views/#src.play_different_games.users.views.UserUpdateView","title":"UserUpdateView","text":"<p>               Bases: <code>LoginRequiredMixin</code>, <code>PermissionRequiredMixin</code>, <code>UpdateView</code></p> <p>Where a user can edit their details.</p>"},{"location":"reference/play_different_games/users/zones/","title":"zones","text":"<p>Default list of time zones</p>"}]}